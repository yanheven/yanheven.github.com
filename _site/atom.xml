<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
   <title>Hyphen's Blog</title>
   <link href="http://hyphen.tk/atom.xml" rel="self" type="application/atom+xml"/>
   <link href="http://hyphen.tk" rel="alternate" type="text/html" />
   <updated>2014-08-23T09:11:08+08:00</updated>
   <id>http://hyphen.tk</id>
   <author>
     <name></name>
     <email></email>
   </author>

   
   <entry>
     <title>jobs speech at stanford</title>
     <link href="http://hyphen.tk/jobs-stanford-speech"/>
     <updated>2014-08-23T00:00:00+08:00</updated>
     <id>http://hyphen.tk/jobs-stanford-speech</id>
     <content type="html">&lt;p&gt;Author:&lt;a href=&quot;http://weibo.com/344736086&quot;&gt;Hyphen&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;在MAC的这个路径下:&quot;/Applications/Pages.app/Contents/Resources/Apple.txt&quot;&lt;/h5&gt;

&lt;h5&gt;有一篇乔布斯在斯坦福的演讲&lt;/h5&gt;

&lt;h5&gt;如下:&lt;/h5&gt;

&lt;h6&gt;Here&#39;s to the crazy ones. The misfits, the rebels. The troublemakers. The round pegs in the square holes. The ones who see things differently. They&#39;re not fond of rules. You can quote them, disagree with them, glorify or vilify them. About the only thing you can&#39;t do is ignore them. Because they change things. They push the human race forward. And while some may see them as the crazy ones, we see genius. Because the ones who are crazy enough to think that they can change the world, are the ones who do.&lt;/h6&gt;

&lt;h6&gt;&lt;/h6&gt;

&lt;h6&gt;&lt;/h6&gt;

&lt;h6&gt;I am honored to be with you today at your commencement from one of the finest universities in the world. I never graduated from college. Truth be told, this is the closest I&#39;ve ever gotten to a college graduation. Today I want to tell you three stories from my life. That&#39;s it. No big deal. Just three stories.&lt;/h6&gt;

&lt;h6&gt;&lt;/h6&gt;

&lt;h6&gt;The first story is about connecting the dots.&lt;/h6&gt;

&lt;h6&gt;&lt;/h6&gt;

&lt;h6&gt;I dropped out of Reed College after the first 6 months, but then stayed around as a drop-in for another 18 months or so before I really quit. So why did I drop out?&lt;/h6&gt;

&lt;h6&gt;&lt;/h6&gt;

&lt;h6&gt;It started before I was born. My biological mother was a young, unwed college graduate student, and she decided to put me up for adoption. She felt very strongly that I should be adopted by college graduates, so everything was all set for me to be adopted at birth by a lawyer and his wife. Except that when I popped out they decided at the last minute that they really wanted a girl. So my parents, who were on a waiting list, got a call in the middle of the night asking: &quot;We have an unexpected baby boy; do you want him?&quot; They said: &quot;Of course.&quot; My biological mother later found out that my mother had never graduated from college and that my father had never graduated from high school. She refused to sign the final adoption papers. She only relented a few months later when my parents promised that I would someday go to college.&lt;/h6&gt;

&lt;h6&gt;&lt;/h6&gt;

&lt;h6&gt;And 17 years later I did go to college. But I naively chose a college that was almost as expensive as Stanford, and all of my working-class parents&#39; savings were being spent on my college tuition. After six months, I couldn&#39;t see the value in it. I had no idea what I wanted to do with my life and no idea how college was going to help me figure it out. And here I was spending all of the money my parents had saved their entire life. So I decided to drop out and trust that it would all work out OK. It was pretty scary at the time, but looking back it was one of the best decisions I ever made. The minute I dropped out I could stop taking the required classes that didn&#39;t interest me, and begin dropping in on the ones that looked interesting.&lt;/h6&gt;

&lt;h6&gt;&lt;/h6&gt;

&lt;h6&gt;It wasn&#39;t all romantic. I didn&#39;t have a dorm room, so I slept on the floor in friends&#39; rooms, I returned coke bottles for the 5¢ deposits to buy food with, and I would walk the 7 miles across town every Sunday night to get one good meal a week at the Hare Krishna temple. I loved it. And much of what I stumbled into by following my curiosity and intuition turned out to be priceless later on. Let me give you one example:&lt;/h6&gt;

&lt;h6&gt;&lt;/h6&gt;

&lt;h6&gt;Reed College at that time offered perhaps the best calligraphy instruction in the country. Throughout the campus every poster, every label on every drawer, was beautifully hand calligraphed. Because I had dropped out and didn&#39;t have to take the normal classes, I decided to take a calligraphy class to learn how to do this. I learned about serif and san serif typefaces, about varying the amount of space between different letter combinations, about what makes great typography great. It was beautiful, historical, artistically subtle in a way that science can&#39;t capture, and I found it fascinating.&lt;/h6&gt;

&lt;h6&gt;&lt;/h6&gt;

&lt;h6&gt;None of this had even a hope of any practical application in my life. But ten years later, when we were designing the first Macintosh computer, it all came back to me. And we designed it all into the Mac. It was the first computer with beautiful typography. If I had never dropped in on that single course in college, the Mac would have never had multiple typefaces or proportionally spaced fonts. And since Windows just copied the Mac, it&#39;s likely that no personal computer would have them. If I had never dropped out, I would have never dropped in on this calligraphy class, and personal computers might not have the wonderful typography that they do. Of course it was impossible to connect the dots looking forward when I was in college. But it was very, very clear looking backwards ten years later.&lt;/h6&gt;

&lt;h6&gt;&lt;/h6&gt;

&lt;h6&gt;Again, you can&#39;t connect the dots looking forward; you can only connect them looking backwards. So you have to trust that the dots will somehow connect in your future. You have to trust in something — your gut, destiny, life, karma, whatever. This approach has never let me down, and it has made all the difference in my life.&lt;/h6&gt;

&lt;h6&gt;&lt;/h6&gt;

&lt;h6&gt;My second story is about love and loss.&lt;/h6&gt;

&lt;h6&gt;&lt;/h6&gt;

&lt;h6&gt;I was lucky — I found what I loved to do early in life. Woz and I started Apple in my parents garage when I was 20. We worked hard, and in 10 years Apple had grown from just the two of us in a garage into a $2 billion company with over 4000 employees. We had just released our finest creation — the Macintosh — a year earlier, and I had just turned 30. And then I got fired. How can you get fired from a company you started? Well, as Apple grew we hired someone who I thought was very talented to run the company with me, and for the first year or so things went well. But then our visions of the future began to diverge and eventually we had a falling out. When we did, our Board of Directors sided with him. So at 30 I was out. And very publicly out. What had been the focus of my entire adult life was gone, and it was devastating.&lt;/h6&gt;

&lt;h6&gt;&lt;/h6&gt;

&lt;h6&gt;I really didn&#39;t know what to do for a few months. I felt that I had let the previous generation of entrepreneurs down - that I had dropped the baton as it was being passed to me. I met with David Packard and Bob Noyce and tried to apologize for screwing up so badly. I was a very public failure, and I even thought about running away from the valley. But something slowly began to dawn on me — I still loved what I did. The turn of events at Apple had not changed that one bit. I had been rejected, but I was still in love. And so I decided to start over.&lt;/h6&gt;

&lt;h6&gt;&lt;/h6&gt;

&lt;h6&gt;I didn&#39;t see it then, but it turned out that getting fired from Apple was the best thing that could have ever happened to me. The heaviness of being successful was replaced by the lightness of being a beginner again, less sure about everything. It freed me to enter one of the most creative periods of my life.&lt;/h6&gt;

&lt;h6&gt;&lt;/h6&gt;

&lt;h6&gt;During the next five years, I started a company named NeXT, another company named Pixar, and fell in love with an amazing woman who would become my wife. Pixar went on to create the worlds first computer animated feature film, Toy Story, and is now the most successful animation studio in the world. In a remarkable turn of events, Apple bought NeXT, I returned to Apple, and the technology we developed at NeXT is at the heart of Apple&#39;s current renaissance. And Laurene and I have a wonderful family together.&lt;/h6&gt;

&lt;h6&gt;&lt;/h6&gt;

&lt;h6&gt;I&#39;m pretty sure none of this would have happened if I hadn&#39;t been fired from Apple. It was awful tasting medicine, but I guess the patient needed it. Sometimes life hits you in the head with a brick. Don&#39;t lose faith. I&#39;m convinced that the only thing that kept me going was that I loved what I did. You&#39;ve got to find what you love. And that is as true for your work as it is for your lovers. Your work is going to fill a large part of your life, and the only way to be truly satisfied is to do what you believe is great work. And the only way to do great work is to love what you do. If you haven&#39;t found it yet, keep looking. Don&#39;t settle. As with all matters of the heart, you&#39;ll know when you find it. And, like any great relationship, it just gets better and better as the years roll on. So keep looking until you find it. Don&#39;t settle.&lt;/h6&gt;

&lt;h6&gt;&lt;/h6&gt;

&lt;h6&gt;My third story is about death.&lt;/h6&gt;

&lt;h6&gt;&lt;/h6&gt;

&lt;h6&gt;When I was 17, I read a quote that went something like: &quot;If you live each day as if it was your last, someday you&#39;ll most certainly be right.&quot; It made an impression on me, and since then, for the past 33 years, I have looked in the mirror every morning and asked myself: &quot;If today were the last day of my life, would I want to do what I am about to do today?&quot; And whenever the answer has been &quot;No&quot; for too many days in a row, I know I need to change something.&lt;/h6&gt;

&lt;h6&gt;&lt;/h6&gt;

&lt;h6&gt;Remembering that I&#39;ll be dead soon is the most important tool I&#39;ve ever encountered to help me make the big choices in life. Because almost everything — all external expectations, all pride, all fear of embarrassment or failure - these things just fall away in the face of death, leaving only what is truly important. Remembering that you are going to die is the best way I know to avoid the trap of thinking you have something to lose. You are already naked. There is no reason not to follow your heart.&lt;/h6&gt;

&lt;h6&gt;&lt;/h6&gt;

&lt;h6&gt;About a year ago I was diagnosed with cancer. I had a scan at 7:30 in the morning, and it clearly showed a tumor on my pancreas. I didn&#39;t even know what a pancreas was. The doctors told me this was almost certainly a type of cancer that is incurable, and that I should expect to live no longer than three to six months. My doctor advised me to go home and get my affairs in order, which is doctor&#39;s code for prepare to die. It means to try to tell your kids everything you thought you&#39;d have the next 10 years to tell them in just a few months. It means to make sure everything is buttoned up so that it will be as easy as possible for your family. It means to say your goodbyes.&lt;/h6&gt;

&lt;h6&gt;&lt;/h6&gt;

&lt;h6&gt;I lived with that diagnosis all day. Later that evening I had a biopsy, where they stuck an endoscope down my throat, through my stomach and into my intestines, put a needle into my pancreas and got a few cells from the tumor. I was sedated, but my wife, who was there, told me that when they viewed the cells under a microscope the doctors started crying because it turned out to be a very rare form of pancreatic cancer that is curable with surgery. I had the surgery and I&#39;m fine now.&lt;/h6&gt;

&lt;h6&gt;&lt;/h6&gt;

&lt;h6&gt;This was the closest I&#39;ve been to facing death, and I hope it&#39;s the closest I get for a few more decades. Having lived through it, I can now say this to you with a bit more certainty than when death was a useful but purely intellectual concept:&lt;/h6&gt;

&lt;h6&gt;&lt;/h6&gt;

&lt;h6&gt;No one wants to die. Even people who want to go to heaven don&#39;t want to die to get there. And yet death is the destination we all share. No one has ever escaped it. And that is as it should be, because Death is very likely the single best invention of Life. It is Life&#39;s change agent. It clears out the old to make way for the new. Right now the new is you, but someday not too long from now, you will gradually become the old and be cleared away. Sorry to be so dramatic, but it is quite true.&lt;/h6&gt;

&lt;h6&gt;&lt;/h6&gt;

&lt;h6&gt;Your time is limited, so don&#39;t waste it living someone else&#39;s life. Don&#39;t be trapped by dogma — which is living with the results of other people&#39;s thinking. Don&#39;t let the noise of others&#39; opinions drown out your own inner voice. And most important, have the courage to follow your heart and intuition. They somehow already know what you truly want to become. Everything else is secondary.&lt;/h6&gt;

&lt;h6&gt;&lt;/h6&gt;

&lt;h6&gt;When I was young, there was an amazing publication called The Whole Earth Catalog, which was one of the bibles of my generation. It was created by a fellow named Stewart Brand not far from here in Menlo Park, and he brought it to life with his poetic touch. This was in the late 1960&#39;s, before personal computers and desktop publishing, so it was all made with typewriters, scissors, and polaroid cameras. It was sort of like Google in paperback form, 35 years before Google came along: it was idealistic, and overflowing with neat tools and great notions.&lt;/h6&gt;

&lt;h6&gt;&lt;/h6&gt;

&lt;h6&gt;Stewart and his team put out several issues of The Whole Earth Catalog, and then when it had run its course, they put out a final issue. It was the mid-1970s, and I was your age. On the back cover of their final issue was a photograph of an early morning country road, the kind you might find yourself hitchhiking on if you were so adventurous. Beneath it were the words: &quot;Stay Hungry. Stay Foolish.&quot; It was their farewell message as they signed off. Stay Hungry. Stay Foolish. And I have always wished that for myself. And now, as you graduate to begin anew, I wish that for you.&lt;/h6&gt;

&lt;h6&gt;&lt;/h6&gt;

&lt;h6&gt;Stay Hungry. Stay Foolish.&lt;/h6&gt;

&lt;h6&gt;&lt;/h6&gt;

&lt;h6&gt;Thank you all very much.&lt;/h6&gt;
</content>
   </entry>
   
   <entry>
     <title></title>
     <link href="http://hyphen.tk/ceph"/>
     <updated>2014-08-17T00:00:00+08:00</updated>
     <id>http://hyphen.tk/ceph</id>
     <content type="html">&lt;p&gt;Author:&lt;a href=&quot;http://weibo.com/344736086&quot;&gt;Hyphen&lt;/a&gt;&lt;/p&gt;
</content>
   </entry>
   
   <entry>
     <title>强者越强</title>
     <link href="http://hyphen.tk/stronger-will-be-stronger"/>
     <updated>2014-08-07T00:00:00+08:00</updated>
     <id>http://hyphen.tk/stronger-will-be-stronger</id>
     <content type="html">&lt;p&gt;Author:&lt;a href=&quot;http://weibo.com/344736086&quot;&gt;Hyphen&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;起源&lt;/h4&gt;

&lt;p&gt;最近接触了另外一个开源云计算项目--Cloudstack,虽然一直在做云计算，但却基本是局限在Openstack这个项目里面。记得之前就有好几个云计算的开源项目，最后还是不了了之了。&lt;/p&gt;

&lt;h4&gt;思考&lt;/h4&gt;

&lt;p&gt;对比Opnstack和其他的开源云计算项目，记得我在12年末尾开始接触云计算时，就读过一篇关于当时四大开源云计算项目的对比文章，文章当中对比了项目的参与玩家，开发者的代码提交活跃度，邮件列表的活跃度，开发者数量等，记得当时就是因为Openstack在各方面都领先，才选择了Openstack来进行学习（在此特别感谢华南农业大学九楼实验室及邝颖杰老师）。在玩起了Openstack后，基本上没有去了解其他项目，在这两年，反而是经常听到国内又有某某公司加入Openstack，成为什么牌会员之类。其实这就说明了加进来玩Openstack的人越来越多了。这样基本上是验证了&lt;em&gt;强者越强&lt;/em&gt;这个道理。&lt;/p&gt;

&lt;h4&gt;Why&lt;/h4&gt;

&lt;p&gt;为什么越来越多公司使用Openstack来作为其云平台的框架呢？在这里我不想讨论Openstack技术方面有多牛，因为自己本身能力也不足以来做这种技术说客。只想就外部非技术因素来分析下原因。&lt;/p&gt;

&lt;p&gt;首先是众多公司是由于云计算的趋势而开始这方面的研究，然后才有了去选择开源项目来进行快速布署这个后果。我就以我自身选择的考虑因素来分析下。&lt;/p&gt;

&lt;p&gt;首先考虑的是这个项目是否能满足我业务上的需求，能实现我对机器集群的管理，计算，存储，网络资源的再分配。其实基本上当时几大项目都可以满足这个需求。&lt;/p&gt;

&lt;p&gt;再者，我会考虑这个技术的使用者，有哪些公司在用，特别考虑那些和我条件比较相似的公司，他们是怎么用的，可以大概参考下他们的使用案例。特别是有现实的样例参考，更加有说服力。这就好比一些广告画面，经常会给消费者传递一些积极的结果，因为人就是想看到&lt;em&gt;“正果”&lt;/em&gt;。&lt;/p&gt;

&lt;p&gt;然后，我还会考虑由于这个是开源项目，它的发展前景怎样，其实这就跟投资有点像了，你要把你的资金放潜力股上。正如投资分析一样，投资中有基本而分析，在开源项目中也有相应的潜力分析，可以从以下几个方面来考虑吧：&lt;/p&gt;

&lt;p&gt;1、可以大概从技术层面分析下这个项目的技术上是否比较可行，特别是各个组件是否合理，衔接怎样。其实我觉得这方面分析也只是个大概印象，比较不重要，因为事情是可以发展的。&lt;/p&gt;

&lt;p&gt;2、感觉特别重要的是这个项目的参与者吧。如果项目有业内重量级别的参与者，我们肯定会觉得这个项目比较靠谱。这就是为什么广告要找大牌明星来代言的原因了。很明显，对于消费都来说，如果有两个品牌，他们都不了解，而其中一个品牌请了巨星来代言，消费都的潜意识里面就会很容易将这个品牌和明星关联起来。其实这个跟我们看人的第一印象也类似，虽然经常看错人，但这个因素确定是影响了我们的感觉。回到项目中来，特别是当我们看到我们之前向之看齐的公司使用了，就会觉得特别有吸引力。原因：a,有大牛公司参与，觉得项目在技术层面会越来越完善; b,相信这些公司的参与会吸引更多的人参与进来; c,有一种和大款站在同一条船的感觉，这样有人在极力保证这船不能沉。这个其实可以用雷军的投资历史来分析。为什么雷军投的公司似乎比较容易成功，首先不可否认，雷军看人投的，他识人能力非凡。但比较重要的一点是他投资的基本是跟他自己业务相关的领域（最近几年是这样），然后他不是给钱就完了，而是在背后默默的支持创业者。因为他和创业者在同一条船上，创业者想要成功，而雷军在极力支持不让船沉，所以成功率会比较高一点，看凡客就知道了，经历了几回死还是死不了，因为雷军也在这条船上。&lt;/p&gt;

&lt;p&gt;3、还有一个是上游厂商的支持吧，看看Openstack为什么比其他项目优越，最开始Ubuntu就是Openstack的忠实粉丝，接着去年Red Hat又加大力度投入社区。虽然说这种操作系统厂商的商业目的很是赤裸裸，但无疑，他们的加入，给其他人打了一剂强心剂。当然，还有其他设备厂商的加入，特别是网络设备的，虽然他们加入很大目的是为了卖多点设备。但明显是你会看到一个生态系统正在完善。就好比现在的安卓阵营，当一个完整的生态系统开始形成的时候，基本上它只会越来越强了。&lt;/p&gt;

&lt;h4&gt;Mind storm&lt;/h4&gt;

&lt;p&gt;强者越强，其实比较常见的就是国内的贫富差距，很多国家也一样，在某一个时间点来说，富人拥有的资源是比穷人多的，单一变量法分析，假如完全相同的两个人，很明显是拥有资源多的那个更容易成功些。所以富人越富，然后他的后代也会趋向于越富，这样说大家很可能说生活中经常看到一些败家富二代，但我相信这些只是个别，因为我们更容易看到败家的，而很多其实也是跟我们一般人一样，但是由于他们拥有更多的教育资源，资本资源，人脉资源，所以很明显，他们更加容易取得成就。这点我深有体会，因为我从农村过来，村里很多家庭中的孩子连大学都没上，其实高中也都没几个上的。这里并不是说高学历就高人一等，而是说一个概率事件。比如具体点吧，在我村子里找10个孩子，然后在福布斯排行榜上找10个孩子，哪组取得的成就会更大些呢？&lt;/p&gt;

&lt;p&gt;（写于回家的大巴上，用Mac还真是方便）&lt;/p&gt;
</content>
   </entry>
   
   <entry>
     <title>what is "AOP"</title>
     <link href="http://hyphen.tk/what-is-aop"/>
     <updated>2014-08-06T00:00:00+08:00</updated>
     <id>http://hyphen.tk/what-is-aop</id>
     <content type="html">&lt;p&gt;Author:&lt;a href=&quot;http://weibo.com/344736086&quot;&gt;Hyphen&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;what is &quot;AOP&quot;&lt;/h4&gt;

&lt;p&gt;今天又接触到一个新名词--“AOP”，当我在电话听到这个词时，一头雾水，因为在学校里面学过OOA,OOD,当然还有OOP,就是没听过AOP.&lt;/p&gt;

&lt;p&gt;AOP:Aspect Oriented Programming,用中文表达就是：面向切面编程。&lt;/p&gt;

&lt;p&gt;在做开发设计时，你有你的核心关注点，就是你要实现的主要功能，好比某项数据操作，这些具体的功能是相对独立的，但在实现这些核心功能的同时，你又想增加一些额外的操作，比如对操作写日志，这些额外的操作就是横切关注点。一开始我们会简单把这些操作直接加到我们的核心关注点代码上，但这样一来就有很多重复而臃肿的代码结构，我们可以把这些横切关注点统一出来处理。大概这就是面向横切编程。&lt;/p&gt;

&lt;p&gt;下面的资料介绍得不错：&lt;br/&gt;
1、&lt;a href=&quot;http://docs.jboss.org/jbossaop/docs/2.0.0.GA/docs/aspect-framework/userguide/en/html/what.html&quot;&gt;JBoss官方文档关于AOP介绍&lt;/a&gt;    &lt;br/&gt;
2、&lt;a href=&quot;http://www.cnblogs.com/wayfarer/articles/241024.html&quot;&gt;张逸：AOP技术基础&lt;/a&gt;&lt;/p&gt;
</content>
   </entry>
   
   <entry>
     <title>hello mac</title>
     <link href="http://hyphen.tk/hello-mac"/>
     <updated>2014-08-04T00:00:00+08:00</updated>
     <id>http://hyphen.tk/hello-mac</id>
     <content type="html">&lt;h1&gt;Hello Mac&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://weibo.com/344736086&quot;&gt;Hyphen&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;coding with Mac is really effeciency&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;print &quot;hello mac&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;better coding style&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;for i in range(1,?)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;better life style&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;while True:
    coding
    if home:
        sleep early
    else:
        coding
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;coding anywhere since mac is so portable&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;site=[&quot;home&quot;,&quot;part&quot;,&quot;cafe&quot;,&quot;others&quot;]
for i in site:
    coding
&lt;/code&gt;&lt;/pre&gt;
</content>
   </entry>
   
   <entry>
     <title>cloud computing</title>
     <link href="http://hyphen.tk/hello-cloud"/>
     <updated>2014-08-04T00:00:00+08:00</updated>
     <id>http://hyphen.tk/hello-cloud</id>
     <content type="html">&lt;h1&gt;&lt;a href=&quot;/hello-cloud&quot; title=&quot;cloud computing&quot;&gt;cloud computing&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;2014-08-04   By &lt;a href=&quot;http://hyphen.tk/&quot;&gt;Hyphen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今天是个好日子。&lt;/p&gt;
</content>
   </entry>
   
   <entry>
     <title>about me</title>
     <link href="http://hyphen.tk/about-me"/>
     <updated>2014-08-04T00:00:00+08:00</updated>
     <id>http://hyphen.tk/about-me</id>
     <content type="html">&lt;p&gt;Author:&lt;a href=&quot;http://weibo.com/344736086&quot;&gt;Hyphen&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;I am a openstacker, pythoner, linuxer, macer and learner.&lt;/h4&gt;

&lt;h4&gt;I firmly believe the more I learn, the more I code, the more I can do to better our world &amp;amp; our life&lt;/h4&gt;

&lt;h3&gt;CV&lt;/h3&gt;

&lt;p&gt;yanheven@gmail.com&lt;/p&gt;

&lt;h5&gt;Expertise&lt;/h5&gt;

&lt;p&gt;熟练 : Openstack python c java linux network&lt;br/&gt;
了解 : Jquery css html Ajax Hadoop&lt;/p&gt;

&lt;h5&gt;Work Experience&lt;/h5&gt;

&lt;p&gt;12/2013-06/2014: 在唯品会云计算部门从事：协助Openstack的布署、运营；参与WEB控制台前端与后端的开发(python,git)   &lt;br/&gt;
01/2013-12/2013: 在学校实验室（温氏集团-华农联合实验室）邝颖杰老师指导下，从事Openstack的布署与研究
2013-now: Openstack 中文翻译组成员&lt;/p&gt;

&lt;h5&gt;Educational Background&lt;/h5&gt;

&lt;p&gt;09/2010-06/2014 University:华南农业大学 &lt;br/&gt;
                 Major: 网络工程, 学士学位&lt;br/&gt;
                Dissertation:基于云计算流媒体服务器集群的搭建&lt;/p&gt;

&lt;h5&gt;Honours and Certificate&lt;/h5&gt;

&lt;p&gt;11/2008: 广东省茂名市信息学竞赛一等奖   &lt;br/&gt;
03/2011: 华南农业大学程序设计大赛新生杯第八名   &lt;br/&gt;
04/2011: 第四届2011ACM程序设计大赛珠海赛区团队三等奖&lt;/p&gt;

&lt;h5&gt;Social Experience&lt;/h5&gt;

&lt;p&gt;07/2011-02/2012: 电脑城电脑销售    &lt;br/&gt;
03/2012-05/2012: 广州10个城中村探索，6人小队队长&lt;/p&gt;

&lt;h5&gt;Language&lt;/h5&gt;

&lt;p&gt;普通话，粤语，广东电白黎话   &lt;br/&gt;
英语良好，雅思6.5（听说读写分别：7.5，6，6.5，6.5）
大学英语六级，四级&lt;/p&gt;
</content>
   </entry>
   
   <entry>
     <title>openstack horizon 开发入门</title>
     <link href="http://hyphen.tk/openstack-horizon-develop"/>
     <updated>2014-03-16T00:00:00+08:00</updated>
     <id>http://hyphen.tk/openstack-horizon-develop</id>
     <content type="html">&lt;p&gt;Author:&lt;a href=&quot;http://weibo.com/344736086&quot;&gt;Hyphen&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;这段时间进行openstack控制台界面的开发有2个多月，感觉学到了不少东西。&lt;/h4&gt;

&lt;h2&gt;1、前端&lt;/h2&gt;

&lt;p&gt;首先是前端的技术，之前只知道简单的html语法，对CSS，JS，JQUERY等一窍不通。年后，小组开发人手不是很够，果断转行去开发，记得刚开始，搞个练手的界面，搞了两天才实现。而且前提是别人写好的结构，拿过来修改使用。熟读唐诗三百首，不会做诗也会吟的境界。但是一旦碰到没有样例的界面，那就头疼了，因为很多标签都是不认识的。但只能问人，搜索用法，记得有几天，写几个界面，搞得有点喘不过气来。但事实证明一句老话，当你感觉到难受的时候，是你学东西最多的时候。因为不懂，所以觉得很难，因为一直坚持，所以特别难受，中途多次想不做前端了，让其他人做，只写后端好了，但还是一直坚持。截止本稿时间，终于学到了一些基本前端，现在做OPensack的控制台界面开发勉强够用。&lt;/p&gt;

&lt;h2&gt;2、后端&lt;/h2&gt;

&lt;p&gt;开发后端直接使用各个服务的client，因为Horizon就是这么干的。&lt;/p&gt;

&lt;p&gt;通过实例化一个通过授权认证的客户端对象，然后可以进行后续的操作&lt;/p&gt;

&lt;h3&gt;2.1、nova&lt;/h3&gt;

&lt;p&gt;nova操作&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import novaclient.v1_1.client as nvclient
nova = nvclient.Client(auth_url=auth_dict[&quot;--os-auth-url&quot;],\
                        username=auth_dict[&quot;--os-username&quot;],\
                        api_key=auth_dict[&quot;--os-password&quot;],\
                        project_id=auth_dict[&quot;--os-tenant-name&quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;2.2 keystone&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;import keystoneclient.v2_0.client as ksclient                     
keystone = ksclient.Client(auth_url = auth_dict[&quot;--os-auth-url&quot;], \
                                    username = auth_dict[&quot;--os-username&quot;], \
                                    password = auth_dict[&quot;--os-password&quot;], \
                                    tenant_name = auth_dict[&quot;--os-tenant-name&quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;2.3 neutron&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;import keystoneclient.v2_0.client as ksclient
keystone = ksclient.Client(auth_url = auth_dict[&quot;--os-auth-url&quot;], \
                                    username = auth_dict[&quot;--os-username&quot;], \
                                    password = auth_dict[&quot;--os-password&quot;], \
                                    tenant_name = auth_dict[&quot;--os-tenant-name&quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import keystoneclient.v2_0.client as ksclient  
keystone = ksclient.Client(auth_url = auth_dict[&quot;--os-auth-url&quot;], \  
                                    username = auth_dict[&quot;--os-username&quot;], \  
                                    password = auth_dict[&quot;--os-password&quot;], \  
                                    tenant_name = auth_dict[&quot;--os-tenant-name&quot;])  

endpoint_url = keystone.service_catalog.url_for(service_type=&#39;network&#39;)  
token = keystone.auth_token  
neutron2 = neutronclient.Client(endpoint_url=endpoint_url, token=token) 
neutron = neutronclient.Client(auth_url=auth_dict[&quot;--os-auth-url&quot;],
username=auth_dict[&quot;--os-username&quot;],
password=auth_dict[&quot;--os-password&quot;],
tenant_name=auth_dict[&quot;--os-tenant-name&quot;])                                   
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;这段时间进行openstack控制台界面的开发有2个多月，感觉学到了不少东西。&lt;/h4&gt;

&lt;h2&gt;1、前端&lt;/h2&gt;

&lt;p&gt;首先是前端的技术，之前只知道简单的html语法，对CSS，JS，JQUERY等一窍不通。年后，小组开发人手不是很够，果断转行去开发，记得刚开始，搞个练手的界面，搞了两天才实现。而且前提是别人写好的结构，拿过来修改使用。熟读唐诗三百首，不会做诗也会吟的境界。但是一旦碰到没有样例的界面，那就头疼了，因为很多标签都是不认识的。但只能问人，搜索用法，记得有几天，写几个界面，搞得有点喘不过气来。但事实证明一句老话，当你感觉到难受的时候，是你学东西最多的时候。因为不懂，所以觉得很难，因为一直坚持，所以特别难受，中途多次想不做前端了，让其他人做，只写后端好了，但还是一直坚持。截止本稿时间，终于学到了一些基本前端，现在做OPensack的控制台界面开发勉强够用。&lt;/p&gt;

&lt;h2&gt;2、后端&lt;/h2&gt;

&lt;p&gt;开发后端直接使用各个服务的client，因为Horizon就是这么干的。&lt;/p&gt;

&lt;p&gt;通过实例化一个通过授权认证的客户端对象，然后可以进行后续的操作&lt;/p&gt;

&lt;h3&gt;2.1、nova&lt;/h3&gt;

&lt;p&gt;nova操作&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import novaclient.v1_1.client as nvclient
nova = nvclient.Client(auth_url=auth_dict[&quot;--os-auth-url&quot;],\
                        username=auth_dict[&quot;--os-username&quot;],\
                        api_key=auth_dict[&quot;--os-password&quot;],\
                        project_id=auth_dict[&quot;--os-tenant-name&quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;2.2 keystone&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;import keystoneclient.v2_0.client as ksclient                     
keystone = ksclient.Client(auth_url = auth_dict[&quot;--os-auth-url&quot;], \
                                    username = auth_dict[&quot;--os-username&quot;], \
                                    password = auth_dict[&quot;--os-password&quot;], \
                                    tenant_name = auth_dict[&quot;--os-tenant-name&quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;2.3 neutron&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;import keystoneclient.v2_0.client as ksclient
keystone = ksclient.Client(auth_url = auth_dict[&quot;--os-auth-url&quot;], \
                                    username = auth_dict[&quot;--os-username&quot;], \
                                    password = auth_dict[&quot;--os-password&quot;], \
                                    tenant_name = auth_dict[&quot;--os-tenant-name&quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import keystoneclient.v2_0.client as ksclient  
keystone = ksclient.Client(auth_url = auth_dict[&quot;--os-auth-url&quot;], \  
                                    username = auth_dict[&quot;--os-username&quot;], \  
                                    password = auth_dict[&quot;--os-password&quot;], \  
                                    tenant_name = auth_dict[&quot;--os-tenant-name&quot;])  

endpoint_url = keystone.service_catalog.url_for(service_type=&#39;network&#39;)  
token = keystone.auth_token  
neutron2 = neutronclient.Client(endpoint_url=endpoint_url, token=token) 
neutron = neutronclient.Client(auth_url=auth_dict[&quot;--os-auth-url&quot;],
username=auth_dict[&quot;--os-username&quot;],
password=auth_dict[&quot;--os-password&quot;],
tenant_name=auth_dict[&quot;--os-tenant-name&quot;])                                   
&lt;/code&gt;&lt;/pre&gt;
</content>
   </entry>
   
   <entry>
     <title>openstack horizon 开发入门</title>
     <link href="http://hyphen.tk/openstack-horizon-develop"/>
     <updated>2014-03-15T00:00:00+08:00</updated>
     <id>http://hyphen.tk/openstack-horizon-develop</id>
     <content type="html">&lt;p&gt;Author:&lt;a href=&quot;http://weibo.com/344736086&quot;&gt;Hyphen&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;这段时间进行openstack控制台界面的开发有2个多月，感觉学到了不少东西。&lt;/h4&gt;

&lt;h2&gt;1、前端&lt;/h2&gt;

&lt;p&gt;首先是前端的技术，之前只知道简单的html语法，对CSS，JS，JQUERY等一窍不通。年后，小组开发人手不是很够，果断转行去开发，记得刚开始，搞个练手的界面，搞了两天才实现。而且前提是别人写好的结构，拿过来修改使用。熟读唐诗三百首，不会做诗也会吟的境界。但是一旦碰到没有样例的界面，那就头疼了，因为很多标签都是不认识的。但只能问人，搜索用法，记得有几天，写几个界面，搞得有点喘不过气来。但事实证明一句老话，当你感觉到难受的时候，是你学东西最多的时候。因为不懂，所以觉得很难，因为一直坚持，所以特别难受，中途多次想不做前端了，让其他人做，只写后端好了，但还是一直坚持。截止本稿时间，终于学到了一些基本前端，现在做OPensack的控制台界面开发勉强够用。&lt;/p&gt;

&lt;h2&gt;2、后端&lt;/h2&gt;

&lt;p&gt;开发后端直接使用各个服务的client，因为Horizon就是这么干的。&lt;/p&gt;

&lt;p&gt;通过实例化一个通过授权认证的客户端对象，然后可以进行后续的操作&lt;/p&gt;

&lt;h3&gt;2.1、nova&lt;/h3&gt;

&lt;p&gt;nova操作&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import novaclient.v1_1.client as nvclient
nova = nvclient.Client(auth_url=auth_dict[&quot;--os-auth-url&quot;],\
                        username=auth_dict[&quot;--os-username&quot;],\
                        api_key=auth_dict[&quot;--os-password&quot;],\
                        project_id=auth_dict[&quot;--os-tenant-name&quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;2.2 keystone&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;import keystoneclient.v2_0.client as ksclient                     
keystone = ksclient.Client(auth_url = auth_dict[&quot;--os-auth-url&quot;], \
                                    username = auth_dict[&quot;--os-username&quot;], \
                                    password = auth_dict[&quot;--os-password&quot;], \
                                    tenant_name = auth_dict[&quot;--os-tenant-name&quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;2.3 neutron&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;import keystoneclient.v2_0.client as ksclient
keystone = ksclient.Client(auth_url = auth_dict[&quot;--os-auth-url&quot;], \
                                    username = auth_dict[&quot;--os-username&quot;], \
                                    password = auth_dict[&quot;--os-password&quot;], \
                                    tenant_name = auth_dict[&quot;--os-tenant-name&quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import keystoneclient.v2_0.client as ksclient  
keystone = ksclient.Client(auth_url = auth_dict[&quot;--os-auth-url&quot;], \  
                                    username = auth_dict[&quot;--os-username&quot;], \  
                                    password = auth_dict[&quot;--os-password&quot;], \  
                                    tenant_name = auth_dict[&quot;--os-tenant-name&quot;])  

endpoint_url = keystone.service_catalog.url_for(service_type=&#39;network&#39;)  
token = keystone.auth_token  
neutron2 = neutronclient.Client(endpoint_url=endpoint_url, token=token) 
neutron = neutronclient.Client(auth_url=auth_dict[&quot;--os-auth-url&quot;],
username=auth_dict[&quot;--os-username&quot;],
password=auth_dict[&quot;--os-password&quot;],
tenant_name=auth_dict[&quot;--os-tenant-name&quot;])                                   
&lt;/code&gt;&lt;/pre&gt;
</content>
   </entry>
   
   <entry>
     <title>openstack 常用命令</title>
     <link href="http://hyphen.tk/openstack-command-line"/>
     <updated>2013-12-11T00:00:00+08:00</updated>
     <id>http://hyphen.tk/openstack-command-line</id>
     <content type="html">&lt;p&gt;Author:&lt;a href=&quot;http://weibo.com/344736086&quot;&gt;Hyphen&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;. Nova&lt;/h4&gt;

&lt;p&gt;I.1. Management&lt;/p&gt;

&lt;p&gt;Services status:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo nova-manage service list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enable/disable a service:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo nova-manage service enable|disable --host=host --service=nova-compute
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add a new network:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo nova-manage network create --label vlan1 --fixed_range_v4 10.0.1.0/24 --num_networks 1 --network_size 256 --vlan 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remove a network, first disassociate it to a project:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo nova-manage project scrub projectname
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;$ sudo nova-manage network delete [cidr]&lt;/p&gt;

&lt;p&gt;List networks:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo nova-manage network list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add a floating IPs address range:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo nova-manage floating create --pool [my-pool] --ip_range 172.17.1.32/27
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add a floating to your tenant (you will get a floating IP address, but unused):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nova floating-ip-create [my-pool]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Associate IP to an instance (specific tenant, according to your credentials)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nova add-floating-ip [my-instance] [ip]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check the status of the floating IPs (tenant related):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nova floating-ip-list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;List all instances running on every compute node:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo nova-manage vm list | column -t
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I.2. Common&lt;/p&gt;

&lt;p&gt;Add a new security group:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nova secgroup-create web-server &quot;Web server running&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add rule to this group:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nova secgroup-add-rule web-server tcp 80 80 0.0.0.0/0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add a security rules, allow ping and ssh:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nova secgroup-add-rule web-server icmp -1 -1 0.0.0.0/0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;$ nova secgroup-add-rule web-server tcp 22 22 0.0.0.0/0&lt;/p&gt;

&lt;p&gt;Create credential:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nova keypair-add my_key &amp;gt; mey_key.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;$ chmod 600 *.pem&lt;/p&gt;

&lt;p&gt;List instances from the tenant in your credential&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nova list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Boot a new instance:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nova boot --flavor [flavor-id] --image [image-id] --key_name [key1] --security_groups [default] [instance-name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Delete an instance:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nova delete [INSTANCE_ID]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Take a snapshot from an instance but first commit the buffer cache to disk:&lt;/p&gt;

&lt;p&gt;my-instance:~$ sync
my-instance:~$ sudo echo 3 | sudo tee /proc/sys/vm/drop_caches
$ nova image-create [instance-id] [snapshot-name]&lt;/p&gt;

&lt;p&gt;Get precise information about a specific instance:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nova show [instance-name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Perform a block_migration:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nova live-migration --block_migrate [INSTANCE_ID] [TARGET_SERVER]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;II. Glance&lt;/h4&gt;

&lt;p&gt;Add an image to glance (public):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ glance add name=&quot;my-image&quot; is_public=True|False disk_format=qcow2 container_format=ovf architecture=x86_64 &amp;lt; my-image.img
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check the glance backend:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ glance index
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Same with nova-common:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nova image-list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Set an image to public:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ glance update [image-id] is_public=true
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;III. Keystone&lt;/h4&gt;

&lt;p&gt;List all the tenants:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ keystone tenant-list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;List all users:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ keystone user-list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a new user:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ keystone user-create --name [username] --tenant_id [tenant-id] --pass [password] --email [email] --enabled true 
&lt;/code&gt;&lt;/pre&gt;
</content>
   </entry>
   
 
</feed>
